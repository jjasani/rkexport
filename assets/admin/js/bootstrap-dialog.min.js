(function(a, b) {
 if (typeof module !== "undefined" && module.exports) {
  module.exports = b(require("jquery")(a))
 } else {
  if (typeof define === "function" && define.amd) {
   define("bootstrap-dialog", ["jquery"], function(c) {
    return b(c)
   })
  } else {
   a.BootstrapDialog = b(a.jQuery)
  }
 }
}(this, function(b) {
 var a = function(c) {
  this.defaultOptions = b.extend(true, {
   id: a.newGuid(),
   buttons: [],
   data: {},
   onshow: null,
   onshown: null,
   onhide: null,
   onhidden: null
  }, a.defaultOptions);
  this.indexedButtons = {};
  this.registeredButtonHotkeys = {};
  this.draggableData = {
   isMouseDown: false,
   mouseOffset: {}
  };
  this.realized = false;
  this.opened = false;
  this.initOptions(c);
  this.holdThisInstance()
 };
 a.NAMESPACE = "bootstrap-dialog";
 a.TYPE_DEFAULT = "type-default";
 a.TYPE_INFO = "type-info";
 a.TYPE_PRIMARY = "type-primary";
 a.TYPE_SUCCESS = "type-success";
 a.TYPE_WARNING = "type-warning";
 a.TYPE_DANGER = "type-danger";
 a.DEFAULT_TEXTS = {};
 a.DEFAULT_TEXTS[a.TYPE_DEFAULT] = "Information";
 a.DEFAULT_TEXTS[a.TYPE_INFO] = "Information";
 a.DEFAULT_TEXTS[a.TYPE_PRIMARY] = "Information";
 a.DEFAULT_TEXTS[a.TYPE_SUCCESS] = "Success";
 a.DEFAULT_TEXTS[a.TYPE_WARNING] = "Warning";
 a.DEFAULT_TEXTS[a.TYPE_DANGER] = "Danger";
 a.SIZE_NORMAL = "size-normal";
 a.SIZE_LARGE = "size-large";
 a.BUTTON_SIZES = {};
 a.BUTTON_SIZES[a.SIZE_NORMAL] = "";
 a.BUTTON_SIZES[a.SIZE_LARGE] = "btn-lg";
 a.ICON_SPINNER = "glyphicon glyphicon-asterisk";
 a.ZINDEX_BACKDROP = 1040;
 a.ZINDEX_MODAL = 1050;
 a.defaultOptions = {
  type: a.TYPE_PRIMARY,
  size: a.SIZE_NORMAL,
  cssClass: "",
  title: null,
  message: null,
  nl2br: true,
  closable: true,
  closeByBackdrop: true,
  closeByKeyboard: true,
  spinicon: a.ICON_SPINNER,
  autodestroy: true,
  draggable: false,
  animate: true
 };
 a.configDefaultOptions = function(c) {
  a.defaultOptions = b.extend(true, a.defaultOptions, c)
 };
 a.dialogs = {};
 a.openAll = function() {
  b.each(a.dialogs, function(d, c) {
   c.open()
  })
 };
 a.closeAll = function() {
  b.each(a.dialogs, function(d, c) {
   c.close()
  })
 };
 a.moveFocus = function() {
  var c = null;
  b.each(a.dialogs, function(e, d) {
   c = d
  });
  if (c !== null && c.isRealized()) {
   c.getModal().focus()
  }
 };
 a.showScrollbar = function() {
  var c = null;
  b.each(a.dialogs, function(f, e) {
   c = e
  });
  if (c !== null && c.isRealized() && c.isOpened()) {
   var d = c.getModal().data("bs.modal");
   d.checkScrollbar();
   b("body").addClass("modal-open");
   d.setScrollbar()
  }
 };
 a.prototype = {
  constructor: a,
  initOptions: function(c) {
   this.options = b.extend(true, this.defaultOptions, c);
   return this
  },
  holdThisInstance: function() {
   a.dialogs[this.getId()] = this;
   return this
  },
  initModalStuff: function() {
   this.setModal(this.createModal()).setModalDialog(this.createModalDialog()).setModalContent(this.createModalContent()).setModalHeader(this.createModalHeader()).setModalBody(this.createModalBody()).setModalFooter(this.createModalFooter());
   this.getModal().append(this.getModalDialog());
   this.getModalDialog().append(this.getModalContent());
   this.getModalContent().append(this.getModalHeader()).append(this.getModalBody()).append(this.getModalFooter());
   return this
  },
  createModal: function() {
   var c = b('<div class="modal" tabindex="-1"></div>');
   c.prop("id", this.getId());
   return c
  },
  getModal: function() {
   return this.$modal
  },
  setModal: function(c) {
   this.$modal = c;
   return this
  },
  createModalDialog: function() {
   return b('<div class="modal-dialog"></div>')
  },
  getModalDialog: function() {
   return this.$modalDialog
  },
  setModalDialog: function(c) {
   this.$modalDialog = c;
   return this
  },
  createModalContent: function() {
   return b('<div class="modal-content"></div>')
  },
  getModalContent: function() {
   return this.$modalContent
  },
  setModalContent: function(c) {
   this.$modalContent = c;
   return this
  },
  createModalHeader: function() {
   return b('<div class="modal-header"></div>')
  },
  getModalHeader: function() {
   return this.$modalHeader
  },
  setModalHeader: function(c) {
   this.$modalHeader = c;
   return this
  },
  createModalBody: function() {
   return b('<div class="modal-body"></div>')
  },
  getModalBody: function() {
   return this.$modalBody
  },
  setModalBody: function(c) {
   this.$modalBody = c;
   return this
  },
  createModalFooter: function() {
   return b('<div class="modal-footer"></div>')
  },
  getModalFooter: function() {
   return this.$modalFooter
  },
  setModalFooter: function(c) {
   this.$modalFooter = c;
   return this
  },
  createDynamicContent: function(d) {
   var c = null;
   if (typeof d === "function") {
    c = d.call(d, this)
   } else {
    c = d
   }
   if (typeof c === "string") {
    c = this.formatStringContent(c)
   }
   return c
  },
  formatStringContent: function(c) {
   if (this.options.nl2br) {
    return c.replace(/\r\n/g, "<br />").replace(/[\r\n]/g, "<br />")
   }
   return c
  },
  setData: function(c, d) {
   this.options.data[c] = d;
   return this
  },
  getData: function(c) {
   return this.options.data[c]
  },
  setId: function(c) {
   this.options.id = c;
   return this
  },
  getId: function() {
   return this.options.id
  },
  getType: function() {
   return this.options.type
  },
  setType: function(c) {
   this.options.type = c;
   this.updateType();
   return this
  },
  updateType: function() {
   if (this.isRealized()) {
    var c = [a.TYPE_DEFAULT, a.TYPE_INFO, a.TYPE_PRIMARY, a.TYPE_SUCCESS, a.TYPE_WARNING, a.TYPE_DANGER];
    this.getModal().removeClass(c.join(" ")).addClass(this.getType())
   }
   return this
  },
  getSize: function() {
   return this.options.size
  },
  setSize: function(c) {
   this.options.size = c;
   return this
  },
  getCssClass: function() {
   return this.options.cssClass
  },
  setCssClass: function(c) {
   this.options.cssClass = c;
   return this
  },
  getTitle: function() {
   return this.options.title
  },
  setTitle: function(c) {
   this.options.title = c;
   this.updateTitle();
   return this
  },
  updateTitle: function() {
   if (this.isRealized()) {
    var c = this.getTitle() !== null ? this.createDynamicContent(this.getTitle()) : this.getDefaultText();
    this.getModalHeader().find("." + this.getNamespace("title")).html("").append(c)
   }
   return this
  },
  getMessage: function() {
   return this.options.message
  },
  setMessage: function(c) {
   this.options.message = c;
   this.updateMessage();
   return this
  },
  updateMessage: function() {
   if (this.isRealized()) {
    var c = this.createDynamicContent(this.getMessage());
    this.getModalBody().find("." + this.getNamespace("message")).html("").append(c)
   }
   return this
  },
  isClosable: function() {
   return this.options.closable
  },
  setClosable: function(c) {
   this.options.closable = c;
   this.updateClosable();
   return this
  },
  setCloseByBackdrop: function(c) {
   this.options.closeByBackdrop = c;
   return this
  },
  canCloseByBackdrop: function() {
   return this.options.closeByBackdrop
  },
  setCloseByKeyboard: function(c) {
   this.options.closeByKeyboard = c;
   return this
  },
  canCloseByKeyboard: function() {
   return this.options.closeByKeyboard
  },
  isAnimate: function() {
   return this.options.animate
  },
  setAnimate: function(c) {
   this.options.animate = c;
   return this
  },
  updateAnimate: function() {
   if (this.isRealized()) {
    this.getModal().toggleClass("fade", this.isAnimate())
   }
   return this
  },
  getSpinicon: function() {
   return this.options.spinicon
  },
  setSpinicon: function(c) {
   this.options.spinicon = c;
   return this
  },
  addButton: function(c) {
   this.options.buttons.push(c);
   return this
  },
  addButtons: function(d) {
   var c = this;
   b.each(d, function(e, f) {
    c.addButton(f)
   });
   return this
  },
  getButtons: function() {
   return this.options.buttons
  },
  setButtons: function(c) {
   this.options.buttons = c;
   this.updateButtons();
   return this
  },
  getButton: function(c) {
   if (typeof this.indexedButtons[c] !== "undefined") {
    return this.indexedButtons[c]
   }
   return null
  },
  getButtonSize: function() {
   if (typeof a.BUTTON_SIZES[this.getSize()] !== "undefined") {
    return a.BUTTON_SIZES[this.getSize()]
   }
   return ""
  },
  updateButtons: function() {
   if (this.isRealized()) {
    if (this.getButtons().length === 0) {
     this.getModalFooter().hide()
    } else {
     t